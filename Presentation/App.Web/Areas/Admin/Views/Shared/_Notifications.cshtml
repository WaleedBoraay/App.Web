@using App.Core.Domain.Notifications
@inject App.Core.RepositoryServices.IRepository<Notification> NotificationRepo

@{
    var notifications = await NotificationRepo.GetAllAsync(q =>
        q.OrderByDescending(n => n.CreatedOnUtc).Take(3));
}

@if (notifications.Any())
{
    <div aria-live="polite" aria-atomic="true"
         class="position-fixed top-0 p-3"
         style="z-index: 2000;width: -webkit-fill-available;">

        <div class="toast-container">
            @foreach (var n in notifications)
            {
                var bgClass = n.Type switch
                {
                    NotificationType.Success => "bg-success text-white",
                    NotificationType.Error => "bg-danger text-white",
                    NotificationType.Warning => "bg-warning text-dark",
                    NotificationType.Info => "bg-info text-dark",
                    _ => "bg-secondary text-white"
                };

                <div class="toast align-items-center @bgClass border-0 mb-2 shadow"
                     role="alert" aria-live="assertive" aria-atomic="true"
                     data-bs-delay="4000">
                    <div class="d-flex">
                        <div class="toast-body">
                            <strong>@n.Type:</strong> @n.Message
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto"
                                data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            }
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var toastElList = [].slice.call(document.querySelectorAll('.toast'));
            toastElList.map(function (toastEl) {
                var toast = new bootstrap.Toast(toastEl);
                toast.show();
            });
        });
    </script>
}
